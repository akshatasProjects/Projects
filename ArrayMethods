--- TOPICS ---

1. indexOf()
2. splice()
3. includes()
4. Shallow Copy - concat(), slice(), spread

# How Do You Get the Index for an Element in an Array Using the indexOf Method?

- In JavaScript, the indexOf() method is useful for finding the first index of a specific element within an array. If the element cannot be found, then it will return -1.

SYNTAX : array.indexOf(element, fromIndex)

- element represents the value you want to search for within the array.
- fromIndex parameter is the position from which the search should start. (The fromIndex parameter is optional. If fromIndex is not provided, the search starts from the beginning of the array. )

# How Do You Add and Remove Elements from the Middle of an Array?

- The splice() method in JavaScript is a powerful way for modifying arrays.
- It allows you to add or remove elements from any position in an array, including the middle.

- The return value for the splice() method will be an array of the items removed from the array. If nothing was removed, then an empty array will be returned.

- NOTE : It is important to note that this method will mutate the original array, modifying it in place rather than creating a new array. This is something to be aware of when working with splice().

SYNTAX : array.splice(startIndex, itemsToRemove, item1, item2)

- "startIndex" specifies the index at which to begin modifying the array.
- "itemsToRemove" is an optional parameter indicating how many elements to remove. If itemsToRemove is omitted, splice() will remove all elements from startIndex to the end of the array.
- The subsequent parameters (item1, item2, and so on) are the elements to be added to the array, beginning at the start index.

-- Now, let's look at how to add elements to the middle of an array:
let colors = ["red", "green", "blue"];
colors.splice(1, 0, "yellow", "purple");
console.log(colors); // ["red", "yellow", "purple", "green", "blue"]

NOTE : If you need to keep the original array unchanged, you should create a copy before using splice():

--- One common use case for splice() is to remove a single element from an array when you know its index:

let fruits = ["apple", "banana", "orange", "mango"];
let indexToRemove = fruits.indexOf("orange");
if (indexToRemove !== -1) {
fruits.splice(indexToRemove, 1);

console.log(fruits); // ["apple", "banana", "mango"]

--- You can also use splice() to clear an array by removing all elements

let array = [1, 2, 3, 4, 5];
array.splice(0);

console.log(array); // []

NOTE : While splice() is powerful, it's worth noting that for very large arrays, it can be less efficient than other methods, especially when modifying the beginning of the array. This is because splice() may need to shift all subsequent elements. In such cases, if you're only adding or removing elements at the end of the array, methods like push(), pop(), unshift(), and shift() might be more appropriate.

## How Can You Check if an Array Contains a Certain Value?

- In JavaScript, the includes() method is a simple and efficient way to check if an array contains a specific value.
- This method returns a boolean value: true if the array contains the specified element, and false otherwise.

- The includes() method is particularly useful when you need to quickly verify the presence of an element in an array without needing to know its exact position.

ex: let fruits = ["apple", "banana", "orange", "mango"];
console.log(fruits.includes("banana")); // true
console.log(fruits.includes("grape")); // false

- The includes() method is "case-sensitive" when dealing with strings.

- The includes() method can also accept an optional second parameter that specifies the position in the array to start the search. This is useful if you want to check for an element's presence in a specific part of the array.

let numbers = [10, 20, 30, 40, 50, 30, 60];
console.log(numbers.includes(30, 3)); // true
console.log(numbers.includes(30, 4)); // true

For the first console.log, we are looking for the number 30 starting at index 3. In this case, there is a number 30 that appears after index 3, so the includes() method returns true.

It's worth noting that includes() uses the strict equality comparison (===), which means it can distinguish between different types.

let mixedArray = [1, "2", 3, "4", 5];
console.log(mixedArray.includes(2)); // false
console.log(mixedArray.includes("2")); // true

## What Is a Shallow Copy of an Array, and What Are Some Ways to Create These Copies?

- A shallow copy of an array is a new array that contains references to the same elements as the original array.
  -- Creating shallow copies of arrays is a common operation, especially when you want to manipulate an array without modifying the original.

-- There are several methods for creating shallow copies of arrays, and we'll explore some of the most common ones: concat(), slice(), and the spread operator

concat() method -- This method creates a new array by merging two or more arrays.
When used with a single array, it effectively creates a shallow copy.

ex: let originalArray = [1, 2, 3];
let copyArray = [].concat(originalArray);

console.log(copyArray); // [1, 2, 3]
console.log(copyArray === originalArray); // false

-- The copyArray contains the same elements as originalArray, but it is a different array object, which is why the strict equality check (===) returns false.

slice() method -- When called without arguments, slice() returns a shallow copy of the entire array. Here's how it works:
let originalArray = [1, 2, 3];
let copyArray = originalArray.slice();

console.log(copyArray); // [1, 2, 3]
console.log(copyArray === originalArray); // false

The spread operator (...) -- introduced in ES6, provides another concise way to create shallow copies of arrays

let originalArray = [1, 2, 3];
let copyArray = [...originalArray];

console.log(copyArray); // [1, 2, 3]
console.log(copyArray === originalArray); // false

-- The spread operator (...) spreads the elements of originalArray into a new array, effectively creating a shallow copy.
